import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'

import styles from '../styles/Home.module.css'

import { Calendar, momentLocalizer, Views } from 'react-big-calendar'
import moment from 'moment';
import { useMemo, useState } from 'react'
import EventInfoModal from '../components/modal/EventInfoModal'

let date = new Date("2022-09-30");

date.setDate(date.getDate() + 5)
export const events = [
  {
    id: 0,
    title: 'All Day Event very long title',
    allDay: true,
    start: new Date("2022-09-30"),
    end: date,
  },
  {
    id: 1,
    title: 'Long Event',
    start: new Date(),
    end: new Date(),
  },
  {
    id: 2,
    title: 'Long Event',
    start: new Date(),
    end: new Date(),
  },
  {
    id: 3,
    title: 'Long Event',
    start: new Date(),
    end: new Date(),
  },
]

const Home: NextPage = () => {
  const localizer = momentLocalizer(moment)
  const handleSelectSlot = (data: any) => {
    console.log(data)
    console.log(data?.slots[0])
    setSelectedDate(data)
    toggleDate()
  }

  const handleSelectEvent = (event: any) => {
    console.log(event)
    setSelectedEvent(event)
    toggle()
  }


  const [show, setShow] = useState(false);
  const [showDate, setShowDate] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const toggle = () => setShow(!show);
  const toggleDate = () => setShowDate(!showDate);

  const customDayPropGetter = (date) => {
    if (date.getDay() === 6)
      return {
        className: styles.specialDay,
      }
    else return {}
  }

  const customEventPropGetter = (event) => {
      return {
        className: styles.event,
      }
  }

  const HeaderCellContent = (props: any) => {
    const { date } = props;
    const dayOfWeek = date.getDay();
    const className = dayOfWeek === 6 ? styles.holiday : "";
    return (
      <span className={className}>
        {props.label}
      </span>
    )


  };

  const components = useMemo(() => ({
    month: {
      dateHeader: HeaderCellContent,
    }
  }), [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <EventInfoModal show={show}
          toggle={toggle}
          modalHeading={selectedEvent?.title}
          modalBody={
            <>

            </>
          }
        />
        <EventInfoModal show={showDate}
          toggle={toggleDate}
          modalHeading={moment(new Date(selectedDate?.slots[0])).format('YYYY/MM/DD')}
          modalBody={
            <>

            </>
          }
        />
        <div className="myCustomHeight calendar">
          <Calendar
            defaultView={Views.MONTH}
            view={Views.MONTH}
            localizer={localizer}
            events={events}
            onSelectEvent={handleSelectEvent}
            onSelectSlot={handleSelectSlot}
            selectable
            tooltipAccessor={"title"}
            style={{ height: 800, width: 800 }}
            views={['month']}
            popup
            dayPropGetter={customDayPropGetter}
            eventPropGetter={customEventPropGetter}
            components={components}
          />
        </div>
      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  )
}

export default Home
